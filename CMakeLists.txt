CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)
PROJECT(CKinematics CXX)

SET(PROJECT_VERSION "0.0.0.0")

INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
IF(COMPILER_SUPPORTS_CXX11)
  ADD_COMPILE_OPTIONS(
    "$<$<STREQUAL:$<TARGET_PROPERTY:LINKER_LANGUAGE>,CXX>:-std=c++11>")
ELSE(COMPILER_SUPPORTS_CXX11)
  MESSAGE(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support.")
ENDIF(COMPILER_SUPPORTS_CXX11)

IF(CMAKE_SYSTEM_NAME MATCHES Darwin)
  SET(CMAKE_MACOSX_RPATH 1)
  ADD_COMPILE_OPTIONS(
    "$<$<STREQUAL:$<TARGET_PROPERTY:LINKER_LANGUAGE>,CXX>:-stdlib=libc++>")
ENDIF(CMAKE_SYSTEM_NAME MATCHES Darwin)

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release CACHE STRING
    "Choose the type of build, options are: Debug, Release." FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(CMAKE_VERBOSE_MAKEFILE TRUE)
ELSE(CMAKE_BUILD_TYPE STREQUAL "Debug")
  SET(CMAKE_VERBOSE_MAKEFILE FALSE)
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")

SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -Wextra")
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -Wextra")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")

ADD_SUBDIRECTORY(src)
